import { NodeStatus } from "./lib/BaseNodes/NodeStatus";
import Node from "./lib/BaseNodes/Node";
import RootNode from './lib/BaseNodes/RootNode';
import SequenceNode  from './lib/BaseNodes/SequenceNode';
import SelectorNode from './lib/BaseNodes/SelectorNode';
import ConditionalNode from './lib/BaseNodes/ConditionalNode';
import ActionNode from './lib/BaseNodes/ActionNode';

// Decorators
import AlwaysSucceed from './lib/BaseNodes/Decorators/AlwaysSucceed';
import AlwaysFail from './lib/BaseNodes/Decorators/AlwaysFail';
import Invert from './lib/BaseNodes/Decorators/Invert';


import { RGBot } from 'rg-bot';
import RGCTFUtils, { CTFEvent } from 'rg-ctf-utils';
import { Vec3 } from 'vec3';
import { Item } from 'prismarine-item';
import { Entity } from 'prismarine-entity';
import { Block } from 'prismarine-block';


{{#nodes}}
    {{~^children~}}
        import {{className}} from './lib/{{className}}';
    {{/children}}
{{/nodes}}


const armorManager = require('mineflayer-armor-manager')

{{#nodes}}
    {{~^parent~}}
        let {{variableName}}: RootNode;
    {{/parent}}
{{/nodes}}

export function configureBot(bot: RGBot) {

    bot.setDebug(false)
    bot.allowParkour(true)
    bot.allowDigWhilePathing(true)

    // Load the armor-manager plugin (https://github.com/PrismarineJS/MineflayerArmorManager)
    bot.mineflayer().loadPlugin(armorManager)

    // construct tree
{{#nodes}}
{{^isDecorator}}
{{#if children}}
    {{#if parent}}
    const {{variableName}} = new {{className}}("{{label}}");
    {{else}}
    {{variableName}} = new {{className}}("{{label}}", bot); 
    {{/if}}
    
    {{~#each children}}
        {{#if this.children}}
            {{#if this.isDecorator}}
    {{this.parent.variableName}}.addChild(new {{this.className}}(new {{this.children.0.className}}()));
            {{else}}
    {{this.parent.variableName}}.addChild({{this.variableName}});   
            {{/if}}
        {{else}}
    {{this.parent.variableName}}.addChild(new {{this.className}}());
        {{/if}}
    {{/each}}

{{/if}}
{{/isDecorator}}
{{/nodes}}
}

export async function runTurn(bot: RGBot) {
    try
    {
        {{#nodes}}
            {{^parent}}
        await {{variableName}}.execute();
            {{/parent}}
        {{/nodes}}
    }
    catch(err) {
        console.log("Error Executing Tree: ", err)
    }
}